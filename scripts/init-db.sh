#!/bin/bash

# Script para inicializar o banco de dados do sistema de login

echo "üóÑÔ∏è  Inicializando banco de dados do sistema de login..."

# Verificar se PostgreSQL est√° instalado
if ! command -v psql &> /dev/null; then
    echo "‚ùå PostgreSQL n√£o est√° instalado. Instale o PostgreSQL primeiro."
    exit 1
fi

# Verificar se o arquivo .env existe
if [ ! -f .env ]; then
    echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado. Copiando .env.example..."
    cp .env.example .env
    echo "‚úÖ Arquivo .env criado. Configure as vari√°veis antes de continuar."
    echo "üìù Edite o arquivo .env com suas configura√ß√µes de banco de dados."
    exit 1
fi

# Carregar vari√°veis do .env
source .env

# Extrair informa√ß√µes da DATABASE_URL
if [ -z "$DATABASE_URL" ]; then
    echo "‚ùå DATABASE_URL n√£o configurada no .env"
    exit 1
fi

# Extrair componentes da URL do banco
# Formato: postgresql://username:password@host:port/database
DB_URL_REGEX="postgresql://([^:]+):([^@]+)@([^:]+):([0-9]+)/(.+)"

if [[ $DATABASE_URL =~ $DB_URL_REGEX ]]; then
    DB_USER="${BASH_REMATCH[1]}"
    DB_PASSWORD="${BASH_REMATCH[2]}"
    DB_HOST="${BASH_REMATCH[3]}"
    DB_PORT="${BASH_REMATCH[4]}"
    DB_NAME="${BASH_REMATCH[5]}"
else
    echo "‚ùå Formato de DATABASE_URL inv√°lido"
    echo "Expected: postgresql://username:password@host:port/database"
    exit 1
fi

echo "üìä Configura√ß√µes do banco:"
echo "  Host: $DB_HOST"
echo "  Port: $DB_PORT"
echo "  Database: $DB_NAME"
echo "  User: $DB_USER"

# Verificar conex√£o com PostgreSQL
echo "üîå Testando conex√£o com PostgreSQL..."
export PGPASSWORD="$DB_PASSWORD"

if ! psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -c "\q" 2>/dev/null; then
    echo "‚ùå N√£o foi poss√≠vel conectar ao PostgreSQL"
    echo "Verifique se:"
    echo "  - PostgreSQL est√° rodando"
    echo "  - As credenciais no .env est√£o corretas"
    echo "  - O usu√°rio tem permiss√µes adequadas"
    exit 1
fi

echo "‚úÖ Conex√£o estabelecida com sucesso!"

# Verificar se o banco de dados existe
echo "üîç Verificando se o banco '$DB_NAME' existe..."
if psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -lqt | cut -d \| -f 1 | grep -qw "$DB_NAME"; then
    echo "‚úÖ Banco de dados '$DB_NAME' j√° existe"
else
    echo "üì¶ Criando banco de dados '$DB_NAME'..."
    if createdb -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" "$DB_NAME"; then
        echo "‚úÖ Banco de dados '$DB_NAME' criado com sucesso!"
    else
        echo "‚ùå Erro ao criar banco de dados"
        exit 1
    fi
fi

# Executar schema SQL
echo "üèóÔ∏è  Executando schema do banco de dados..."
if psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -f database/schema.sql; then
    echo "‚úÖ Schema aplicado com sucesso!"
else
    echo "‚ùå Erro ao aplicar schema"
    exit 1
fi

# Verificar se as tabelas foram criadas
echo "üîç Verificando tabelas criadas..."
TABLES=$(psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -t -c "SELECT tablename FROM pg_tables WHERE schemaname = 'public';" | tr -d ' ')

EXPECTED_TABLES=("users" "access_tokens" "password_reset_tokens" "email_verification_tokens")
ALL_TABLES_FOUND=true

for table in "${EXPECTED_TABLES[@]}"; do
    if echo "$TABLES" | grep -q "^$table$"; then
        echo "  ‚úÖ Tabela '$table' encontrada"
    else
        echo "  ‚ùå Tabela '$table' n√£o encontrada"
        ALL_TABLES_FOUND=false
    fi
done

if [ "$ALL_TABLES_FOUND" = true ]; then
    echo ""
    echo "üéâ Banco de dados inicializado com sucesso!"
    echo ""
    echo "üöÄ Pr√≥ximos passos:"
    echo "  1. Verifique as configura√ß√µes no arquivo .env"
    echo "  2. Execute: npm run dev"
    echo "  3. Acesse: http://localhost:3000"
    echo ""
    echo "üìù Recursos configur√°veis no .env:"
    echo "  - NEXT_PUBLIC_ENABLE_REGISTRATION (true/false)"
    echo "  - NEXT_PUBLIC_ENABLE_PASSWORD_RECOVERY (true/false)"
else
    echo "‚ùå Algumas tabelas n√£o foram criadas corretamente"
    exit 1
fi
